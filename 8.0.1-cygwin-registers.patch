--- origsrc/libunwind-8.0.1.src/src/Registers.hpp	2019-01-14 05:15:20.000000000 -0500
+++ src/libunwind-8.0.1.src/src/Registers.hpp	2019-07-22 09:17:43.007511400 -0400
@@ -306,12 +306,12 @@ private:
     uint64_t __cs;
     uint64_t __fs;
     uint64_t __gs;
-#if defined(_WIN64)
+#if defined(_WIN64) || defined(__CYGWIN__)
     uint64_t __padding; // 16-byte align
 #endif
   };
   GPRs _registers;
-#if defined(_WIN64)
+#if defined(_WIN64) || defined(__CYGWIN__)
   v128 _xmm[16];
 #endif
 };
@@ -524,7 +524,7 @@ inline void Registers_x86_64::setFloatRe
 }
 
 inline bool Registers_x86_64::validVectorRegister(int regNum) const {
-#if defined(_WIN64)
+#if defined(_WIN64) || defined(__CYGWIN__)
   if (regNum < UNW_X86_64_XMM0)
     return false;
   if (regNum > UNW_X86_64_XMM15)
@@ -537,7 +537,7 @@ inline bool Registers_x86_64::validVecto
 }
 
 inline v128 Registers_x86_64::getVectorRegister(int regNum) const {
-#if defined(_WIN64)
+#if defined(_WIN64) || defined(__CYGWIN__)
   assert(validVectorRegister(regNum));
   return _xmm[regNum - UNW_X86_64_XMM0];
 #else
@@ -547,7 +547,7 @@ inline v128 Registers_x86_64::getVectorR
 }
 
 inline void Registers_x86_64::setVectorRegister(int regNum, v128 value) {
-#if defined(_WIN64)
+#if defined(_WIN64) || defined(__CYGWIN__)
   assert(validVectorRegister(regNum));
   _xmm[regNum - UNW_X86_64_XMM0] = value;
 #else
--- origsrc/libunwind-8.0.1.src/src/UnwindRegistersRestore.S	2019-06-10 23:47:50.000000000 -0400
+++ src/libunwind-8.0.1.src/src/UnwindRegistersRestore.S	2019-07-22 09:18:29.179932900 -0400
@@ -18,7 +18,7 @@ DEFINE_LIBUNWIND_PRIVATE_FUNCTION(_ZN9li
 #
 # void libunwind::Registers_x86::jumpto()
 #
-#if defined(_WIN32)
+#if defined(_WIN32) || defined(__CYGWIN__)
 # On windows, the 'this' pointer is passed in ecx instead of on the stack
   movl   %ecx, %eax
 #else
@@ -65,7 +65,7 @@ DEFINE_LIBUNWIND_PRIVATE_FUNCTION(_ZN9li
 #
 # void libunwind::Registers_x86_64::jumpto()
 #
-#if defined(_WIN64)
+#if defined(_WIN64) || defined(__CYGWIN__)
 # On entry, thread_state pointer is in rcx; move it into rdi
 # to share restore code below. Since this routine restores and
 # overwrites all registers, we can use the same registers for
@@ -105,7 +105,7 @@ DEFINE_LIBUNWIND_PRIVATE_FUNCTION(_ZN9li
   # skip fs
   # skip gs
 
-#if defined(_WIN64)
+#if defined(_WIN64) || defined(__CYGWIN__)
   movdqu 176(%rdi),%xmm0
   movdqu 192(%rdi),%xmm1
   movdqu 208(%rdi),%xmm2
--- origsrc/libunwind-8.0.1.src/src/UnwindRegistersSave.S	2019-06-10 23:47:50.000000000 -0400
+++ src/libunwind-8.0.1.src/src/UnwindRegistersSave.S	2019-07-22 09:18:42.448005500 -0400
@@ -63,7 +63,7 @@ DEFINE_LIBUNWIND_FUNCTION(unw_getcontext
 #  thread_state pointer is in rdi
 #
 DEFINE_LIBUNWIND_FUNCTION(unw_getcontext)
-#if defined(_WIN64)
+#if defined(_WIN64) || defined(__CYGWIN__)
 #define PTR %rcx
 #define TMP %rdx
 #else
@@ -95,7 +95,7 @@ DEFINE_LIBUNWIND_FUNCTION(unw_getcontext
   # skip fs
   # skip gs
 
-#if defined(_WIN64)
+#if defined(_WIN64) || defined(__CYGWIN__)
   movdqu %xmm0,176(PTR)
   movdqu %xmm1,192(PTR)
   movdqu %xmm2,208(PTR)
--- origsrc/libunwind-8.0.1.src/src/assembly.h	2019-07-09 15:22:59.000000000 -0400
+++ src/libunwind-8.0.1.src/src/assembly.h	2019-07-22 00:55:35.355906300 -0400
@@ -77,7 +77,7 @@
 #define NO_EXEC_STACK_DIRECTIVE
 #endif
 
-#elif defined(_WIN32)
+#elif defined(_WIN32) || defined(__CYGWIN__)
 
 #define SYMBOL_IS_FUNC(name)                                                   \
   .def name SEPARATOR                                                          \
